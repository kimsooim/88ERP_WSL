services:
  # 88ERP 웹 대시보드 (운영용)
  web-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: 88erp_web_dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/88erp
      - NEXTAUTH_URL=https://erp.88toy.co.kr
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    depends_on:
      - db
      - redis
    networks:
      - 88erp_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15-alpine
    container_name: 88erp_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=88erp
    volumes:
      - 88erp_postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - 88erp_network
    restart: always

  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: 88erp_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - 88erp_redis_data:/data
    networks:
      - 88erp_network
    restart: always

  # Nginx 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: 88erp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-dashboard
    networks:
      - 88erp_network
    restart: always

volumes:
  88erp_postgres_data:
  88erp_redis_data:

networks:
  88erp_network:
    driver: bridge